<div class="go-back-link">
  {{#link-to 'index'}}Back to index{{/link-to}}
</div>

<h1>DialogService</h1>

<div class="panel">
  <h2>Description</h2>
  <p>
    The <code>DialogService</code> can be used to display a dialog to the user.  There are
    two built-in modal dialog types - <code>alert</code> and <code>confirm</code>.
  </p>

  <h3>Basic use:</h3>

  <p>
    Place a {{#link-to 'modal-dialog-component'}}<code>ModalDialogComponent</code>{{/link-to}} in the <code>application</code> template.
    Then use the <code>DialogService</code> to render a modal dialog.
  </p>
  <p>Inject the <code>DialogService</code> into any controllers or components that need it.</p>

  <div class="panel code">
    <pre><code>import Ember from 'ember';

export default Ember.Component.extend({

  dialog: Ember.inject.service(), // inject the dialog service

  someMethod() {

    this.get('dialog').alert('Something happened!');

  }
});</code></pre>
  </div>
</div>

<div class="panel">

  <h2>Alert</h2>

  <p>alert( message )</p>
  <p>
    <code>message</code> can be a <code>String</code> or an <code>Object</code>
  </p>

  <div class="panel code">
    <pre><code>this.get('dialog').alert('Something happened!');</code></pre>
  </div>

  <div>
    <button {{action 'alert' 'Something happened!'}}>Click here</button>
  </div>

  <div class="panel code">
    <pre><code>this.get('dialog').alert({
  title: 'An event has happened',
  body: 'You clicked a button!'
});</code></pre>
  </div>

  <div>
    <button {{action "openAlert"}}>Click here</button>
  </div>

</div>

<div class="panel">

  <h2>Confirm</h2>

  <p>confirm( message )</p>
  <p>
    <code>message</code> can be a <code>String</code> or an <code>Object</code>
  </p>

  <div class="panel code">
    <pre><code>this.get('dialog').confirm({
  title: 'Are you sure?',
  body: 'Do you really want to do this?'
}).then(() => {
  // ... confirmed
}, () => {
  // ... canceled
});</code></pre>
  </div>
  <div>
    <button {{action "openConfirm"}}>Click here</button>
  </div>
  <p>
    Result of confirmation: {{result}}
  </p>
</div>

<div class="panel">

  <h2>openModal</h2>

  <p>openModal( message, type )</p>
  <p>
    <code>message</code> can be a <code>String</code> or an <code>Object</code>
  </p>

  <p>The <code>openModal()</code> method can be used to open a custom modal component. </p>

  <div class="panel code">
    <pre><code>this.get('dialog').openModal({
  title: 'Custom Modal',
  body: 'My custom modal'
}, 'my-custom-modal');</code></pre>
  </div>

  <div>
    <button {{action "openDialog"}}>Click here</button>
  </div>
</div>

<div class="panel">

  <h2>clickOutsideModal</h2>


  <h3>Options</h3>
  <ul>
    <li>null - do nothing</li>
    <li>Boolean - <code>true</code> calls the <code>_confirm</code> method, <code>false</code> calls the <code>_cancel</code> method.</li>
    <li>string - if a method is found on the component with the name of the string, then call it.</li>
    <li>function - calls the passed in method</li>
  </ul>
  <p>
    built-in methods include 'confirm', 'cancel', 'shake'.
  </p>

  <p>The <code>alert</code> dialog defaults to <code>null</code>.  The <code>confirm</code> dialog defaults to <code>'shake'</code>.  All other dialogs default to <code>false</code></p>

  <div class="panel code">
    <pre><code>this.get('dialog').alert({
  title: 'An event has happened',
  clickOutsideModal: 'shake'
});</code></pre>
  </div>

  <div>
    <button {{action "applyOption" "clickOutsideModal" 'shake'}}>Click here</button>
  </div>

  <div class="panel code">
    <pre><code>this.get('dialog').alert({
  title: 'An event has happened',
  clickOutsideModal: false
});</code></pre>
  </div>

  <div>
    <button {{action "applyOption" "clickOutsideModal" false}}>Click here</button>
  </div>

  <div class="panel code">
    <pre><code>this.get('dialog').alert({
  title: 'An event has happened',
  clickOutsideModal: 'disable-pointer-events'
});</code></pre>
  </div>

  <div>
    <button {{action "applyOption" "clickOutsideModal" 'disable-pointer-events'}}>Click here</button>
  </div>

</div>

<div class="panel">

  <h2>maskContent</h2>

  <p>If <code>true</code> then an overlay will be applied to the content.</p>

  <div class="panel code">
    <pre><code>this.get('dialog').alert({
  title: 'An event has happened',
  maskContent: true
});</code></pre>
  </div>

  <div>
    <button {{action "applyOption" "maskContent" true}}>Click here</button>
  </div>

  <div class="panel code">
    <pre><code>this.get('dialog').alert({
  title: 'An event has happened',
  maskContent: false
});</code></pre>
  </div>

  <div>
    <button {{action "applyOption" "maskContent" false}}>Click here</button>
  </div>



</div>

<div class="panel">

  <h2>disableScroll</h2>

  <p>
    If <code>true</code> then an the <code>modal-dialog-is-open</code> is applied
    to the <code>body</code> element.
  </p>

  <div class="panel code">
    <pre><code>this.get('dialog').alert({
  title: 'An event has happened',
  disableScroll: true
});</code></pre>
  </div>

  <div>
    <button {{action "applyOption" "disableScroll" true}}>Click here</button>
  </div>

  <div class="panel code">
    <pre><code>this.get('dialog').alert({
  title: 'An event has happened',
  disableScroll: false
});</code></pre>
  </div>

  <div>
    <button {{action "applyOption" "disableScroll" false}}>Click here</button>
  </div>



</div>

{{outlet}}
